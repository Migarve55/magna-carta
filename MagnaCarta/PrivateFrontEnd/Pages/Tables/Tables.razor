@page "/Tables"
@attribute [Authorize(Roles = "admin")]
@using SharedDomain.Services
@using SharedDomain.Entities

<PageTitle>Mesas</PageTitle>

@inject ITablesService TablesService

<h1 class="mt-4">Gestión de mesas</h1>

<a class="btn btn-primary" href="Tables/New">Crear</a>

@if (_tables == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <div hidden="@(_errorMsg == null)" class="alert alert-danger mt-2">@_errorMsg</div>
    <table class="table">
        <thead>
        <tr>
            <th>Nombre</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var table in _tables)
        {
            <tr>
                <td>@table.Name</td>
                <td>
                    <a class="btn btn-primary" href="/Tables/@table.Id">Editar</a>
                    <button class="btn btn-danger" onclick=@(() => Delete(@table.Id))>Borrar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyCollection<Table>? _tables;
    private string? _errorMsg;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task Delete(int id)
    {
        var result = await TablesService.DeleteTable(id);
        if (result.IsSuccess)
        {
            await LoadData();
        }
        else
        {
            _errorMsg = result.Error;
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        _tables = await TablesService.GetAllTables();
        StateHasChanged();
    }
}