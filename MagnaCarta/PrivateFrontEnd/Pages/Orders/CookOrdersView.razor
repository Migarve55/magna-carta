
@using SharedDomain.Entities
@using SharedDomain.Services
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IOrdersService OrdersService
@inject NavigationManager Navigation

@if (_orders == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var order in _orders)
        {
           @if (order.ConfirmedDetails.Any())
           {
                <div class="col">
                    <div class="card">
                        <div class="card-header">@order.Table.Name</div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                @foreach (var detail in @order.ConfirmedDetails)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-start">
                                        <span>@detail.Product.Name (@detail.Quantity) - @detail.CreationTime.ToShortTimeString()</span>
                                        @(detail.Status switch
                                        {
                                            OrderDetailStatus.Created => (@<button class="btn btn-secondary" disabled="disabled">Creado</button>),
                                            OrderDetailStatus.Confirmed => (@<button @onclick="@(() => MarkAsReady(detail))" class="btn btn-primary">Preparar</button>),
                                            OrderDetailStatus.Ready => (@<button class="btn btn-secondary" disabled="disabled">Preparado</button>),
                                            OrderDetailStatus.Delivered => (@<button class="btn btn-secondary" disabled="disabled">Entregado</button>)})
                                    </li>
                                }
                            </ul>
                        </div>
                    </div> 
                </div>
           } 
        }
    </div>
}

@code {
    private IReadOnlyCollection<Order>? _orders;
    private HubConnection? _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await SubscribeToOrderChange();
    }

    private async Task LoadData()
    {
        _orders = await OrdersService.GetActiveOrdersForTodayWithConfirmedDetails();
        StateHasChanged();
    }

    private async Task MarkAsReady(SharedDomain.Entities.OrderDetail detail)
    {
        await OrdersService.MarkAsReady(detail);
    }

    private async Task SubscribeToOrderChange()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ordershub"))
            .Build();

        _hubConnection.On<int, int, OrderDetailStatus>("OrderDetailUpdated", (orderId, orderDetailId, newStatus) =>
        {
            var od = _orders
                .Where(o => o.Id == orderId)
                .SelectMany(o => o.ConfirmedDetails)
                .FirstOrDefault(od => od.Id == orderDetailId);
            if (od is not null)
            {
                od.Status = newStatus;
                InvokeAsync(StateHasChanged);
            }
        });
        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
