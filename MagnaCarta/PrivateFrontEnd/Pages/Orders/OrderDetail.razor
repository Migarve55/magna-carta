@page "/Orders/{OrderId:int}"
@using SharedDomain.Entities
@using SharedDomain.Services
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@attribute [Authorize(Roles = "admin")]
<PageTitle>Detalle del pedido</PageTitle>
@inject IOrdersService OrdersService
@inject NavigationManager Navigation
<h1 class="mt-4">Detalle del pedido</h1>
<a href="Orders" class="btn btn-primary">Volver</a>

@if (_order == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Producto</th>
            <th>Cantidad</th>
            <th>Total</th>
            <th>Estado</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var orderDetail in _order!.OrderDetails)
        {
            <tr>
                <td>@orderDetail.Product.Name</td>
                <td>@orderDetail.Quantity</td>
                <td>@orderDetail.Total</td>
                <td>
                    @(orderDetail.Status switch
                    {
                        OrderDetailStatus.Created => (@<button class="btn btn-secondary" disabled="disabled">Creado</button>),
                        OrderDetailStatus.Confirmed => (@<button @onclick="@(() => PrepareDetail(orderDetail))" class="btn btn-primary">Confirmado > Marcar preparado</button>),
                        OrderDetailStatus.Ready => (@<button @onclick="@(() => DeliverDetail(orderDetail))" class="btn btn-primary">Preparado > Marcar entregado</button>),
                        OrderDetailStatus.Delivered => (@<button class="btn btn-secondary" disabled="disabled">Entregado</button>)})
                </td>
            </tr>
        }
        <tr>
            <td colspan="2"></td>
            <td>@_order.Total</td>
        </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int OrderId { get; set; }
    
    private Order? _order { get; set; }
    
    private HubConnection? _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await SubscribeToOrderChange();
    }

    private async Task LoadData()
    {
        _order = await OrdersService.GetOrder(OrderId);
        StateHasChanged();
    }

    private async Task PrepareDetail(SharedDomain.Entities.OrderDetail detail)
    {
        await OrdersService.MarkAsReady(detail);
    }
    
    private async Task DeliverDetail(SharedDomain.Entities.OrderDetail detail)
    {
        await OrdersService.MarkAsDelivered(detail);
    }

    private async Task SubscribeToOrderChange()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ordershub"))
            .Build();

        _hubConnection.On<int, int, OrderDetailStatus>("OrderDetailUpdated", (orderId, orderDetailId, newStatus) =>
        {
            if (orderId == _order!.Id)
            {
                _order!.OrderDetails.Single(od => od.Id == orderDetailId).Status = newStatus;
                InvokeAsync(StateHasChanged);
            }
        });
        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}