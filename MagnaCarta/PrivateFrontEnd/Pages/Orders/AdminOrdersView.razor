@using SharedDomain.Entities
@using SharedDomain.Services
@inject IOrdersService OrdersService

<div class="input-group mb-3">
  <input type="date" class="@(_invalidDates ? "form-control is-invalid" : "form-control")" @bind="_beginDate">
  <input type="date" class="form-control" @bind="_endDate">
  <button class="btn btn-primary" type="button" id="button-addon2" @onclick="@LoadData">Buscar</button>
  <div hidden="@(!_invalidDates)" class="invalid-feedback">La fecha inicial tiene que ser anterior que la final</div>
</div>

@if (_orders == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Mesa</th>
            <th>Fecha</th>
            <th>Estado</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in _orders)
        {
            <tr>
                <td>@order.Table.Name</td>
                <td>@order.Date</td>
                <td>
                    @(order.Status switch
                    {
                        OrderStatus.Created => (@<span>Creado</span>),
                        OrderStatus.Confirmed => (@<span>Confirmado</span>),
                        OrderStatus.Closed => (@<span>Cerrado</span>)})
                </td>
                <td>
                    <a class="btn btn-primary" href="/Orders/@order.Id">Ver detalle</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <Pagination Page="_page" Pages="_pages" PageChanged="@(p => LoadDataAfterPageChange(p))"></Pagination>
}

@code {
    private IReadOnlyCollection<Order>? _orders;
    private DateTime? _beginDate;
    private DateTime? _endDate;
    private bool _invalidDates = false;

    private int _page = 0;
    private int _pages = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _page = Math.Min(1, _pages);
    }

    private async Task LoadData()
    {
        var beginDate = _beginDate ?? DateTime.MinValue;
        var endDate = _endDate ?? DateTime.MaxValue;
        _invalidDates = _beginDate > _endDate;
        if (!_invalidDates)
        {
            var paginationRequest = new PaginationRequest(_page);
            var paginatedResult = await OrdersService.GetOrdersOrderedByDate(paginationRequest, beginDate, endDate);
            _orders = paginatedResult.Result;
            _pages = paginatedResult.Pages;
        }
        StateHasChanged();
    }

    private async Task LoadDataAfterPageChange(int newPage)
    {
        _page = newPage;
        await LoadData();
    }
}
