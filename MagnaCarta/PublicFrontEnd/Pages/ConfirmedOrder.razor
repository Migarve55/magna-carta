@page "/Orders/{OrderId:int}"
@using SharedDomain.Entities
@using SharedDomain.Services

<PageTitle>Pedido</PageTitle>

@inject IOrdersService OrdersService
@inject NavigationManager NavigationManager

<h1>Pedido en curso</h1>

<button class="btn btn-primary" @onclick="CloseOrder">Finalizar</button>

@if (_order == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <ul class="list-group mt-2">
        @foreach (var detail in _order.OrderDetails)
        {
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <span>@detail.Product.Name (@detail.Quantity)</span>
                <div class="badge bg-primary rounded-pill">
                    @(detail.Status switch
                    {
                        OrderDetailStatus.Created => (@<span>Creado</span>),
                        OrderDetailStatus.Confirmed => (@<span>Confirmado</span>),
                        OrderDetailStatus.Ready => (@<span>Preparado</span>),
                        OrderDetailStatus.Delivered => (@<span>Entregado</span>)})
                </div>
            </li>
        }
    </ul>
}

@code {
    [Parameter]
    public int OrderId { get; set; }
    
    private Order? _order;

    protected override async Task OnInitializedAsync()
    {
        _order = await OrdersService.GetOrder(OrderId);
        if (_order!.Status == OrderStatus.Closed)
        {
            NavigationManager.NavigateTo($"Orders/{_order!.Id}/Closed");
        }
    }

    private async Task CloseOrder()
    {
        await OrdersService.CloseOrder(_order!);
        NavigationManager.NavigateTo($"Orders/{_order!.Id}/Closed");
    }
}