@page "/tables/{TableId:int}"
@using SharedDomain.Data
@using SharedDomain.Entities
@using SharedDomain.Services

<PageTitle>Menu</PageTitle>

@inject ITablesService TablesService
@inject IProductsService ProductsService
@inject IOrdersService OrdersService
@inject NavigationManager NavigationManager

@if (_cart == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else
{
    <h2>Menú - @_order?.Table.Name</h2>
    <button class="btn btn-primary mb-3" @onclick="ConfirmOrder">Confirmar pedido</button>
    @foreach (var cartItem in _cart!)
    {
        <div class="card shadow-sm mb-2">
            <div class="card-body">
                <h5 class="card-title">
                    <span class="me-2">@cartItem.Product.Name (@cartItem.Quantity)</span>
                    <span class="badge bg-success" hidden="@(!cartItem.Product.IsVegetarian)">Vegetariano</span>
                    <span class="badge bg-success" hidden="@(!cartItem.Product.IsVegan)">Vegano</span>
                </h5>
                <p class="card-text text-secondary">@cartItem.Product.Description</p>
                <p class="card-text">
                    @foreach (var allergen in @cartItem.Product.Allergens)
                    {
                        <img class="symbol me-1 mb-1" alt="@allergen.Name" title="@allergen.Name" src="img/allergens/@allergen.Symbol"/>
                    }
                </p>
                <div class="text-end">
                    <button class="btn btn-primary" onclick=@(() => AddToOrder(@cartItem.Product))>
                        <span class="oi oi-plus"></span>
                    </button>
                    <button class="btn btn-danger" disabled="@(cartItem.Quantity <= 0)" onclick=@(() => RemoveFromOrder(@cartItem.Product))>
                        <span class="oi oi-minus"></span>
                    </button>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int TableId { get; set; }
    
    private Table? _table;
    private Order? _order;
    private IReadOnlyCollection<Product>? _products;
    private IList<CartItem>? _cart;

    protected override async Task OnInitializedAsync()
    {
        _table = await TablesService.GetTable(TableId);
        if (_table == null)
        {
            NavigationManager.NavigateTo("~/");
        }
        _products = await ProductsService.GetAllProducts();
        _order = await OrdersService.GetOrCreateOrderForTable(_table!);
        if (_order.Status == OrderStatus.Confirmed)
        {
            NavigationManager.NavigateTo($"Orders/{_order!.Id}");
        }
        CreateCart();
    }

    private void CreateCart()
    {
        _cart = _products!
            .Select(p => new CartItem() { Product = p })
            .ToList();
        _order!.OrderDetails?.ForEach(od =>
        {
            var cartItem = _cart.FirstOrDefault(c => c.Product.Id == od.Product.Id);
            if (cartItem != null)
            {
                cartItem.Quantity = od.Quantity;
            }
        });
        StateHasChanged();
    }

    private async Task AddToOrder(Product product)
    {
        _order = await OrdersService.AddProductToTableOrder(_table!, product);
        CreateCart();
    }
    
    private async Task RemoveFromOrder(Product product)
    {
        _order = await OrdersService.RemoveProductFromTableOrder(_table!, product);
        CreateCart();
    }
    
    private async Task ConfirmOrder()
    {
        await OrdersService.ConfirmOrder(_order!);
        NavigationManager.NavigateTo($"Orders/{_order!.Id}");
    }

    class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }
}